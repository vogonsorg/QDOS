# Mesa 3-D graphics library
# Version:  5.1
# 
# Copyright (C) 1999-2003  Brian Paul   All Rights Reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
# AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# DOS/DJGPP core makefile v1.5 for Mesa
#
#  Copyright (C) 2002 - Borca Daniel
#  Email : dborca@users.sourceforge.net
#  Web   : http://www.geocities.com/dborca


#
#  Available options:
#
#    Environment variables:
#	CFLAGS
#
#	GLIDE		path to Glide3 SDK; used with FX.
#			default = $(TOP)/glide3
#	FX=1		build for 3dfx Glide3. Note that this disables
#			compilation of most DMesa code and requires fxMesa.
#			As a consequence, you'll need the DJGPP Glide3
#			library to build any application.
#			default = no
#	HAVE_X86=1	optimize for i386.
#			default = no
#	HAVE_MMX=1	allow MMX specializations, provided your assembler
#			supports MMX instruction set. However, the true CPU
#			capabilities are checked at run-time to avoid crashes.
#			default = no
#	HAVE_SSE=1	(see HAVE_MMX)
#			default = no
#	HAVE_3DNOW=1	(see HAVE_MMX)
#			default = no
#
#    Targets:
#	all:		build GL
#	clean:		remove object files
#



.PHONY: all clean
.INTERMEDIATE: x86/gen_matypes.exe glide3x.dxe

TOP = ../..
GLIDE ?= $(TOP)/glide3
LIBDIR = $(TOP)/lib
GL_LIB = libgl.a
GL_DXE = gl.dxe
GL_IMP = libigl.a

HOST_CC = gcc
CC = gcc
CFLAGS += -I$(TOP)/include -I. -Imain -Iglapi
DXE_EXPORTS= -E _gl -X _gl_ -X _glb
DXE_EXPORTS+= -E _DMesa
ifeq ($(FX),1)
CFLAGS += -D__DOS__ -DH3
CFLAGS += -I$(GLIDE)/include -DFX
DXE_DEPS= -P glide3x.dxe
DXE_EXPORTS+= -E _fxMesa -E _fxQueryHardware -E _fxCloseHardware -E _fxGetScreenGeometry
LIBNAME = "Mesa/FX DJGPP"
else
DXE_DEPS=
LIBNAME = "Mesa DJGPP"
endif

AR = ar
ARFLAGS = rus

UNLINK = rm -f $(1)

include sources

X86_SOURCES = \
	x86/x86.c \
	x86/glapi_x86.S \
	x86/common_x86.c \
	x86/common_x86_asm.S \
	x86/x86_xform2.S \
	x86/x86_xform3.S \
	x86/x86_xform4.S \
	x86/x86_cliptest.S

MMX_SOURCES = \
	x86/mmx_blend.S

SSE_SOURCES = \
	x86/sse.c \
	x86/sse_xform2.S \
	x86/sse_xform3.S \
	x86/sse_xform4.S \
	x86/sse_normal.S

K3D_SOURCES = \
	x86/3dnow.c \
	x86/3dnow_xform2.S \
	x86/3dnow_xform3.S \
	x86/3dnow_xform4.S \
	x86/3dnow_normal.S

CORE_SOURCES = \
	$(MAIN_SOURCES) \
	$(GLAPI_SOURCES) \
	$(MATH_SOURCES) \
	$(ARRAY_CACHE_SOURCES) \
	$(TNL_SOURCES) \
	$(SWRAST_SOURCES) \
	$(SWRAST_SETUP_SOURCES)

ifeq ($(HAVE_MMX),1)
X86_SOURCES += $(MMX_SOURCES)
CFLAGS += -DUSE_MMX_ASM
HAVE_X86 = 1
endif
ifeq ($(HAVE_SSE),1)
X86_SOURCES += $(SSE_SOURCES)
CFLAGS += -DUSE_SSE_ASM
HAVE_X86 = 1
endif
ifeq ($(HAVE_3DNOW),1)
X86_SOURCES += $(K3D_SOURCES)
CFLAGS += -DUSE_3DNOW_ASM
HAVE_X86 = 1
endif
ifeq ($(HAVE_X86),1)
CFLAGS += -DUSE_X86_ASM
else
X86_SOURCES =
endif

DRIVER_SOURCES = \
	drivers/dos/dmesa.c
ifeq ($(FX),1)
DRIVER_SOURCES += \
	drivers/glide/fxapi.c \
	drivers/glide/fxdd.c \
	drivers/glide/fxddspan.c \
	drivers/glide/fxddtex.c \
	drivers/glide/fxsetup.c \
	drivers/glide/fxtexman.c \
	drivers/glide/fxtris.c \
	drivers/glide/fxvb.c \
	drivers/glide/fxglidew.c \
	drivers/glide/fxg.c
else
DRIVER_SOURCES += \
	drivers/dos/video.c \
	drivers/dos/virtual.S \
	drivers/dos/vesa.c \
	drivers/dos/blit.S \
	drivers/dos/vga.c \
	drivers/dos/dpmi.c
endif

SOURCES = $(CORE_SOURCES) $(X86_SOURCES) $(DRIVER_SOURCES)

OBJECTS = $(addsuffix .o,$(basename $(SOURCES)))

X86_OBJECTS = $(addsuffix .o,$(basename $(X86_SOURCES)))

.c.o:
	$(CC) -o $@ $(CFLAGS) -c $<
.S.o:
	$(CC) -o $@ $(CFLAGS) -c $<
.s.o:
	$(CC) -o $@ $(CFLAGS) -x assembler-with-cpp -c $<

all: $(LIBDIR)/$(GL_LIB) $(LIBDIR)/$(GL_DXE) $(LIBDIR)/$(GL_IMP)

$(LIBDIR)/$(GL_LIB): $(OBJECTS)
	$(AR) $(ARFLAGS) $@ $^

ifeq ($(FX),1)
$(LIBDIR)/$(GL_DXE) $(LIBDIR)/$(GL_IMP): glide3x.dxe
endif
$(LIBDIR)/$(GL_DXE) $(LIBDIR)/$(GL_IMP): $(OBJECTS)
	-dxe3gen -o $(LIBDIR)/$(GL_DXE) -Y $(LIBDIR)/$(GL_IMP) -D $(LIBNAME) $(DXE_EXPORTS) $(DXE_DEPS) -U $(OBJECTS)

$(X86_OBJECTS): x86/matypes.h

x86/matypes.h: x86/gen_matypes.exe
	$< > $@

x86/gen_matypes.exe: x86/gen_matypes.c
	$(HOST_CC) -o $@ $(CFLAGS) -s $<

# dxe3gen needs glide3x.dxe when generating the import lib libigl.a.
# so we generate a dummy glide3x.dxe to cover common glide3x exports
# and all possible libc dependencies:
drivers/glide/glide3x_dxe.o: drivers/glide/glide3x_dxe.c
	$(CC) -O0 -Wall -o $@ -c $<
glide3x.dxe: drivers/glide/glide3x_dxe.o
	-dxe3gen -o glide3x.dxe -E _gr -E _gu -U $<

clean:
	-$(call UNLINK,array_cache/*.o)
	-$(call UNLINK,glapi/*.o)
	-$(call UNLINK,main/*.o)
	-$(call UNLINK,math/*.o)
	-$(call UNLINK,swrast/*.o)
	-$(call UNLINK,swrast_setup/*.o)
	-$(call UNLINK,tnl/*.o)
	-$(call UNLINK,x86/*.o)
	-$(call UNLINK,drivers/dos/*.o)
	-$(call UNLINK,drivers/glide/*.o)
